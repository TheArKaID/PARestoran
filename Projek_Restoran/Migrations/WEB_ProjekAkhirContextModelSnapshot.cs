// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Projek_Restoran.Models;

namespace Projek_Restoran.Migrations
{
    [DbContext(typeof(WEB_ProjekAkhirContext))]
    partial class WEB_ProjekAkhirContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Projek_Restoran.Models.JenisPesanan", b =>
                {
                    b.Property<int>("IdJenisPesanan")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Jenis_Pesanan")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NamaJenisPesanan")
                        .IsRequired()
                        .HasColumnName("Nama_Jenis_Pesanan")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdJenisPesanan");

                    b.ToTable("Jenis_Pesanan");
                });

            modelBuilder.Entity("Projek_Restoran.Models.Kategori", b =>
                {
                    b.Property<int>("IdKategori")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Kategori")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NamaKategori")
                        .IsRequired()
                        .HasColumnName("Nama_Kategori")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdKategori");

                    b.ToTable("Kategori");
                });

            modelBuilder.Entity("Projek_Restoran.Models.Meja", b =>
                {
                    b.Property<int>("IdMeja")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Meja")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NomorMeja")
                        .IsRequired()
                        .HasColumnName("Nomor_Meja")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.HasKey("IdMeja");

                    b.ToTable("Meja");
                });

            modelBuilder.Entity("Projek_Restoran.Models.Pesanan", b =>
                {
                    b.Property<int>("IdPesanan")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Pesanan")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IdJenisPesanan")
                        .IsRequired()
                        .HasColumnName("Id_Jenis_Pesanan");

                    b.Property<int?>("IdMeja")
                        .IsRequired()
                        .HasColumnName("Id_Meja");

                    b.Property<int?>("IdProduk")
                        .IsRequired()
                        .HasColumnName("Id_Produk");

                    b.Property<int?>("IdUser")
                        .IsRequired()
                        .HasColumnName("Id_User");

                    b.Property<string>("Jumlah")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("Keterangan")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NamaCustomer")
                        .IsRequired()
                        .HasColumnName("Nama_Customer")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Tanggal")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.HasKey("IdPesanan");

                    b.HasIndex("IdJenisPesanan");

                    b.HasIndex("IdMeja");

                    b.HasIndex("IdProduk");

                    b.HasIndex("IdUser");

                    b.ToTable("Pesanan");
                });

            modelBuilder.Entity("Projek_Restoran.Models.Produk", b =>
                {
                    b.Property<int>("IdProduk")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Produk")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Harga")
                        .IsRequired();

                    b.Property<int?>("IdKategori")
                        .IsRequired()
                        .HasColumnName("Id_Kategori");

                    b.Property<string>("Nama")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("IdProduk");

                    b.HasIndex("IdKategori");

                    b.ToTable("Produk");
                });

            modelBuilder.Entity("Projek_Restoran.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_User")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nama")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("NoHp")
                        .IsRequired()
                        .HasColumnName("No_HP")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("IdUser");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Projek_Restoran.Models.Pesanan", b =>
                {
                    b.HasOne("Projek_Restoran.Models.JenisPesanan", "IdJenisPesananNavigation")
                        .WithMany("Pesanan")
                        .HasForeignKey("IdJenisPesanan")
                        .HasConstraintName("FK_Pesanan_Jenis_Pesanan")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Projek_Restoran.Models.Meja", "IdMejaNavigation")
                        .WithMany("Pesanan")
                        .HasForeignKey("IdMeja")
                        .HasConstraintName("FK_Pesanan_Meja")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Projek_Restoran.Models.Produk", "IdProdukNavigation")
                        .WithMany("Pesanan")
                        .HasForeignKey("IdProduk")
                        .HasConstraintName("FK_Pesanan_Produk")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Projek_Restoran.Models.User", "IdUserNavigation")
                        .WithMany("Pesanan")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_Pesanan_User")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Projek_Restoran.Models.Produk", b =>
                {
                    b.HasOne("Projek_Restoran.Models.Kategori", "IdKategoriNavigation")
                        .WithMany("Produk")
                        .HasForeignKey("IdKategori")
                        .HasConstraintName("FK_Produk_Kategori")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
